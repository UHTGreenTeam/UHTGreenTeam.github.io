{"version":3,"sources":["components/ListView.tsx","components/SearchBar.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["ListView","items","console","log","variant","colorScheme","map","e","item","bin","SearchBar","props","children","placeholder","onInput","value","Links","site","initialState","search","searchedItems","sort","a","b","reducer","state","action","type","payload","Error","App","useReducer","dispatch","handleSearch","searchStr","searchData","filter","it","toLocaleLowerCase","includes","useDisclosure","isOpen","onOpen","onClose","NavLink","px","py","rounded","boxShadow","bg","_hover","textDecoration","useColorModeValue","href","onClick","toString","theme","h","alignItems","justifyContent","size","icon","Close","Hamburger","aria-label","display","md","m","fontWeight","fontSize","spacing","as","base","link","pb","textAlign","minH","p","align","marginRight","marginLeft","marginTop","color","justify","isExternal","ExternalLink","mx","w","target","margin","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.81f00a9f.chunk.js","sourcesContent":["import { FunctionComponent } from 'react';\nimport { Table, TableCaption, Tbody, Td, Th, Thead, Tr } from '@chakra-ui/react';\nimport React from 'react';\n\ninterface IListViewProps {\n    items: [{item: string, bin: string}]\n}\n\nconst ListView: FunctionComponent<IListViewProps> = ({items}) => {\n    console.log(items)\n    return (\n        <Table variant=\"striped\" colorScheme=\"green\">\n            <TableCaption></TableCaption>\n            <Thead>\n                <Tr>\n                    <Th>Item</Th>\n                    <Th>Bin</Th>\n                </Tr>\n            </Thead>\n            <Tbody>\n                {items.map(e => \n                    <Tr key={e.item}>\n                        <Td>{e.item}</Td>\n                        <Td>{e.bin}</Td>\n                    </Tr>\n                )}\n            </Tbody>\n        </Table >\n    )};\n\n\nexport default ListView;\n","import { Input, InputGroup, InputLeftElement } from '@chakra-ui/react';\nimport * as React from 'react';\nimport { FaSearch } from 'react-icons/fa';\n\nexport interface ISearchBarProps {\n    onInput: any, \n    value: string\n}\n\nexport function SearchBar(props: ISearchBarProps) {\n    return (\n        <InputGroup>\n            <InputLeftElement\n                children={<FaSearch />} />\n            <Input\n                placeholder=\"Search\"\n                onInput={props.onInput}\n                value={props.value}\n            />\n        </InputGroup>\n    );\n}\n\n\n\n","import {ReactNode, useReducer} from \"react\"\nimport {\n  ChakraProvider,\n  Box,\n  Text,\n  VStack,\n  Grid,\n  Heading,\n  theme,\n  Flex,\n  IconButton,\n  useColorModeValue,\n  useDisclosure,\n  HStack,\n  Link,\n  Stack\n} from \"@chakra-ui/react\"\nimport ListView from './components/ListView'\nimport items from './data.json'\nimport React from \"react\"\nimport { SearchBar } from \"./components/SearchBar\"\nimport { ExternalLinkIcon, HamburgerIcon, CloseIcon } from '@chakra-ui/icons';\n\nconst HOMEPAGEDIR='/whatgoeswhere'\n\ntype SiteStr = \"St. Michael's Hospital\" | \"St. Joseph's Health Centre\" | \"Providence Healthcare\" | \"Li Ka Shing Knowledge Institute\"\nconst Links:SiteStr[] = [\"St. Michael's Hospital\" , \"St. Joseph's Health Centre\" , \"Providence Healthcare\" , \"Li Ka Shing Knowledge Institute\"]\n\ninterface ISite {\n  SMH: SiteStr,\n  SJHC: SiteStr,\n  PHC: SiteStr,\n  LKS: SiteStr \n}\nconst site:ISite  = {\n  SMH:\"St. Michael's Hospital\",\n  SJHC:\"St. Joseph's Health Centre\",\n  PHC:\"Providence Healthcare\",\n  LKS:\"Li Ka Shing Knowledge Institute\"\n}\n\ntype SiteData = {\"item\": string, \"bin\": string }[]\n\ninterface IState {\n  search: string,\n  searchedItems: SiteData,\n  site: ISite[keyof ISite]\n}\n\nconst initialState:IState = {\n  search:'',\n  searchedItems: items[site.SMH].sort((a, b) => (a.item > b.item) ? 1 : -1),\n  site: site.SMH\n}\n\nconst reducer = (state: IState, action: { type: string; payload: any }) => {\n  switch (action.type){\n    case 'SEARCH_INPUT':\n      return { ...state, search: action.payload}\n    case 'SEARCH_DATA':\n      return { ...state, searchedItems: action.payload}\n    case 'SWITCH_SITE':\n      return { ...state, site: action.payload}\n    default:\n      throw new Error()\n  }\n}\n\nexport const App = () => {\n\n  const [state, dispatch] = useReducer(reducer, initialState)\n\n  const handleSearch = (searchStr: string, site: SiteStr) => {\n    dispatch({ type: 'SEARCH_INPUT', payload: searchStr })\n    const searchData = items[site]\n      .filter(\n        it =>\n          it.item.toLocaleLowerCase().includes(searchStr.toLocaleLowerCase())\n      ).sort((a, b) => (a.item > b.item) ? 1 : -1)\n    dispatch({ type: 'SEARCH_DATA', payload: searchData })\n  }\n\n  const switchSites = (site: SiteStr) =>  {\n    dispatch({type: 'SWITCH_SITE', payload: site})\n    handleSearch('', site)\n  }\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const NavLink = ({ children }: { children: ReactNode }) => (\n    <Link\n      px={2}\n      py={1}\n      rounded={'md'}\n      boxShadow=\"xl\"\n      bg=\"white\"\n      _hover={{\n        textDecoration: 'none',\n        bg: useColorModeValue('gray.200', 'gray.700'),\n      }}\n      href={'#'}\n      onClick={()=>switchSites(children.toString() as SiteStr)}\n      >\n      {children}\n    </Link>\n  );\n\n  return (\n    <ChakraProvider theme={theme}>\n      {/* <Grid templateColumns=\"repeat(5, 1fr)\" bg=\"gray.100\"> */}\n        <Box bg={useColorModeValue('gray.100', 'gray.900')} px={6}>\n          <Flex h={24} alignItems={'center'} justifyContent={'space-between'}>\n            <IconButton\n              size={'lg'}\n              icon={isOpen ? <CloseIcon /> : <HamburgerIcon />}\n              aria-label={'Open Menu'}\n              display={{ md: 'none' }}\n              onClick={isOpen ? onClose : onOpen}\n            />\n              <Box m={6} fontWeight=\"semibold\" fontSize=\"2xl\">What Goes Where</Box>\n            <HStack spacing={8} alignItems={'center'}>\n              <HStack\n                as={'nav'}\n                spacing={8}\n                display={{ base: 'none', md: 'flex' }}>\n                {Links.map((link) => (\n                  <NavLink key={link}>{link}</NavLink>\n                ))}\n              </HStack>\n            </HStack>\n          </Flex>\n          {isOpen ? (\n            <Box pb={4} display={{ md: 'none' }}>\n              <Stack as={'nav'} spacing={4}>\n                {Links.map((link) => (\n                  <NavLink key={link}>{link}</NavLink>\n                ))}\n              </Stack>\n            </Box>\n          ) : null}\n\n\n        </Box>\n      {/* </Grid> */}\n\n      <Box textAlign=\"left\" fontSize=\"xl\">\n\n        <Grid minH=\"10vh\" p={3}>\n          <VStack\n            spacing={8}\n            align=\"stretch\"\n          >\n            <Box textAlign=\"left\" marginRight={8} marginLeft={8} marginTop={5} fontSize=\"xl\" color=\"purple\">\n              <HStack justify=\"space-between\">\n                <Heading color=\"darkgreen\">{state.site}</Heading>\n                <Link href={`${HOMEPAGEDIR}/posters/${state.site}.png`} isExternal>View Poster <ExternalLinkIcon mx=\"2px\"/></Link>\n              </HStack>\n            </Box>\n            <VStack>\n              <Box textAlign=\"left\" marginLeft={8} fontSize=\"m\">\n                <Text >\n                  Not sure how to dispose a waste item? Type it into the searchbar below to find out.\n                </Text>\n              </Box>\n\n              <Box w=\"300px\">\n                <SearchBar onInput={(e: { target: { value: string } }) => handleSearch(e.target.value, state.site)} value={state.search} />\n              </Box>\n            </VStack>\n            <ListView items={state.searchedItems} />\n          </VStack>\n        </Grid>\n      </Box>\n\n      <Box>\n        <Text textAlign=\"center\" margin={8} color=\"purple\">\n          Have a question or concern? Email us at GreenTeam@unityhealth.to\n        </Text>\n      </Box>\n\n    </ChakraProvider>\n  )\n}\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import { ColorModeScript } from \"@chakra-ui/react\"\nimport * as React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { App } from \"./App\"\nimport reportWebVitals from \"./reportWebVitals\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister()\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}